{% for currentClassMetadata in specialSensorTypes %}{%
    assign currentClass = currentClassMetadata[1] %}{%
assign class_name = currentClass.friendlyName | camel_case | capitalize %}{%
if currentClass.systemDeviceNameConvention %}{%
    assign device_name_convention = currentClass.systemDeviceNameConvention | replace: '\{\d\}', '*' %}{%
else %}{%
    assign device_name_convention = '*' %}{%
endif %}{%
if currentClass.inheritance %}{%
    assign base_class = currentClass.inheritance | camel_case | capitalize %}{%
else %}{%
    assign base_class = 'Device' %}{%
endif%}{%
assign driver_name = "" %}{%
if currentClass.driverName %}{%
    for name in currentClass.driverName %}{%
        capture driver_name %}{{ driver_name }}, '{{name}}'{% endcapture %}{%
    endfor %}{%
    capture driver_name %} driver_name=[{{ driver_name | remove_first:', ' }}],{% endcapture %}{%
endif %}
class {{ class_name }}({{ base_class }}):

    """{%
for line in currentClass.description %}{%
    if line %}
    {{ line }}{%
    else %}
{%  endif %}{%
endfor %}
    """

    __slots__ = ['auto_mode']
{% if currentClass.inheritance %}
    SYSTEM_CLASS_NAME = {{ base_class }}.SYSTEM_CLASS_NAME
    SYSTEM_DEVICE_NAME_CONVENTION = {{ base_class }}.SYSTEM_DEVICE_NAME_CONVENTION
{% else %}
    SYSTEM_CLASS_NAME = '{{ currentClass.systemClassName }}'
    SYSTEM_DEVICE_NAME_CONVENTION = '{{ device_name_convention }}'
{% endif %}
    def __init__(self, address=None, name_pattern=SYSTEM_DEVICE_NAME_CONVENTION, name_exact=False, **kwargs):
        super({{ class_name }}, self).__init__(address, name_pattern, name_exact,{{ driver_name }} **kwargs)
        self.auto_mode = True

{% for prop in currentClass.propertyValues %}{%
  assign className = currentClass.friendlyName | downcase | underscore_spaces %}{%
  assign propName = prop.propertyName | upcase | underscore_spaces %}{%
  for value in prop.values %}{%
    for line in value.description %}
    #: {{ line }}{%
    endfor %}{%
    if value.value %}{%
        if value.type == 'int' %}{%
            capture val %}{{ value.value }}{% endcapture %}{%
        else %}{%
            capture val %}'{{ value.value }}'{% endcapture %}{%
        endif %}{%
    else %}{%
        capture val %}'{{ value.name }}'{% endcapture %}{%
    endif %}
    {{ propName }}_{{ value.name | upcase | underscore_non_wc }} = {{ val }}
{% endfor %}{%
endfor %}
{% for prop in currentClass.propertyValues %}{%
assign propName = prop.propertyName | upcase | underscore_spaces%}
    {{ propName }}S = ({%
    for value in prop.values %}
      '{{ value.name }}',{%
    endfor %}
    )
{%endfor %}
{% for mapping in currentClass.sensorValueMappings %}{%
  assign name = mapping.name | downcase | underscore_spaces %}{%
  assign mode = mapping.requiredMode | upcase | underscore_non_wc %}
    @property
    def {{ name }}(self):
        """{%
  for line in mapping.description %}{%
    if line %}
        {{ line }}{%
    else %}
{%  endif %}{%
  endfor %}
        """

        if self.auto_mode:
            self.mode = self.MODE_{{ mode }}

        return {%
  for value_index in mapping.sourceValue
  %}self.value({{ value_index }}){% unless forloop.last %}, {% endunless %}{%
  endfor %}
{% endfor %}{%
endfor %}
